package ua.com.pimenov.hotreloader.action

import com.intellij.openapi.actionSystem.ActionUpdateThread
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.project.ProjectManager
import com.intellij.openapi.project.guessProjectDir
import com.intellij.openapi.ui.DialogWrapper
import com.intellij.ui.components.JBScrollPane
import com.intellij.ui.components.JBTextArea
import ua.com.pimenov.hotreloader.service.FileServerService
import ua.com.pimenov.hotreloader.service.HotReloadService
import ua.com.pimenov.hotreloader.settings.HotReloadSettings
import java.awt.Dimension
import java.awt.Font
import javax.swing.Action
import javax.swing.JComponent

class DiagnoseHotReloadAction : AnAction() {

    override fun getActionUpdateThread(): ActionUpdateThread {
        return ActionUpdateThread.BGT
    }

    override fun actionPerformed(e: AnActionEvent) {
        val project = e.project

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        val diagnosticInfo = buildDiagnosticInfo()

        // –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ
        val dialog = DiagnosticDialog(diagnosticInfo)
        dialog.show()
    }

    private fun buildDiagnosticInfo(): String {
        val settings = HotReloadSettings.getInstance()
        val hotReloadService = HotReloadService.getInstance()
        val fileServerService = FileServerService.getInstance()

        val sb = StringBuilder()

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        sb.appendLine("üî• Diagnostic Information")
        sb.appendLine("=" * 50)
        sb.appendLine()

        // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤
        sb.appendLine("üìä SERVICE STATUS:")
        sb.appendLine("  ‚Ä¢ Hot Reloader Service: ${if (hotReloadService.isRunning()) "‚úÖ Running" else "‚ùå Stopped"}")
        sb.appendLine("  ‚Ä¢ File Server Service: ${getFileServerStatus()}")
        sb.appendLine()

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
        sb.appendLine("üåê NETWORK SETTINGS:")
        sb.appendLine("  ‚Ä¢ WebSocket Port: ${settings.webSocketPort}")
        sb.appendLine("  ‚Ä¢ HTTP Server Port: ${settings.httpPort}")
        sb.appendLine("  ‚Ä¢ WebSocket URL: ws://localhost:${settings.webSocketPort}")
        sb.appendLine("  ‚Ä¢ HTTP Server URL: http://localhost:${settings.httpPort}")
        sb.appendLine()

        // –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        sb.appendLine("‚öôÔ∏è GENERAL SETTINGS:")
        sb.appendLine("  ‚Ä¢ Service Enabled: ${if (settings.isEnabled) "‚úÖ Yes" else "‚ùå No"}")
        sb.appendLine("  ‚Ä¢ Auto Start Server: ${if (settings.autoStartServer) "‚úÖ Yes" else "‚ùå No"}")
        sb.appendLine("  ‚Ä¢ Show Indicator: ${if (settings.showHotReloadIndicator) "‚úÖ Yes" else "‚ùå No"}")
        sb.appendLine("  ‚Ä¢ Browser Refresh Delay: ${settings.browserRefreshDelay} ms")
        sb.appendLine()

        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        sb.appendLine("üìÅ FILE TRACKING:")
        sb.appendLine("  ‚Ä¢ Watched Extensions: ${settings.watchedExtensions}")
        sb.appendLine("  ‚Ä¢ Excluded Folders: ${settings.excludedFolders}")
        sb.appendLine()

        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç–∏
        sb.appendLine("üìÇ PROJECT INFORMATION:")
        val openProjects = ProjectManager.getInstance().openProjects
        if (openProjects.isNotEmpty()) {
            sb.appendLine("  ‚Ä¢ Open Projects: ${openProjects.size}")
            openProjects.forEachIndexed { index, project ->
                val projectDir = project.guessProjectDir()
                sb.appendLine("    ${index + 1}. ${project.name}")
                sb.appendLine("       Path: ${projectDir?.path ?: "Unknown"}")
            }
        } else {
            sb.appendLine("  ‚Ä¢ No open projects")
        }
        sb.appendLine()

        // –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        sb.appendLine("üíª SYSTEM INFORMATION:")
        sb.appendLine("  ‚Ä¢ Java Version: ${System.getProperty("java.version")}")
        sb.appendLine("  ‚Ä¢ OS: ${System.getProperty("os.name")} ${System.getProperty("os.version")}")
        sb.appendLine("  ‚Ä¢ Available Processors: ${Runtime.getRuntime().availableProcessors()}")
        sb.appendLine("  ‚Ä¢ Total Memory: ${Runtime.getRuntime().totalMemory() / 1024 / 1024} MB")
        sb.appendLine("  ‚Ä¢ Free Memory: ${Runtime.getRuntime().freeMemory() / 1024 / 1024} MB")
        sb.appendLine()

        // –ü–æ—Ä–∞–¥–∏ –∑ —É—Å—É–Ω–µ–Ω–Ω—è –Ω–µ–ø–æ–ª–∞–¥–æ–∫
        sb.appendLine("üîß TROUBLESHOOTING TIPS:")

        if (!hotReloadService.isRunning()) {
            sb.appendLine("  ‚ö†Ô∏è  Hot Reloader service is not running!")
            sb.appendLine("     ‚Üí Use 'Tools > Hot Reloader > Start Hot Reload' or")
            sb.appendLine("     ‚Üí Right-click on HTML file and select 'Run with Hot Reloader'")
        }

        if (settings.getWatchedExtensionsSet().isEmpty()) {
            sb.appendLine("  ‚ö†Ô∏è  No file extensions are being watched!")
            sb.appendLine("     ‚Üí Add extensions in Settings > Tools > Hot Reloader")
        }

        if (openProjects.isEmpty()) {
            sb.appendLine("  ‚ö†Ô∏è  No projects are open!")
            sb.appendLine("     ‚Üí Open a project to use Hot Reloader")
        }

        sb.appendLine()
        sb.appendLine("üìù HOW TO USE:")
        sb.appendLine("  1. Right-click on an HTML file")
        sb.appendLine("  2. Select 'Run with Hot Reloader'")
        sb.appendLine("  3. The file will open in browser with auto-refresh")
        sb.appendLine("  4. Edit and save tracked files to see changes")

        return sb.toString()
    }

    private fun getFileServerStatus(): String {
        return try {
            // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            // –ù–∞—Ä–∞–∑—ñ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
            "üì° Available"
        } catch (e: Exception) {
            "‚ùå Error: ${e.message}"
        }
    }

    private operator fun String.times(count: Int): String {
        return this.repeat(count)
    }
}

// –û–∫—Ä–µ–º–∏–π –∫–ª–∞—Å –¥–ª—è –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
class DiagnosticDialog(private val diagnosticInfo: String) : DialogWrapper(true) {

    init {
        title = "Hot Reloader Diagnostic"
        init()
    }

    override fun createCenterPanel(): JComponent {
        val textArea = JBTextArea(diagnosticInfo).apply {
            isEditable = false
            font = Font(Font.MONOSPACED, Font.PLAIN, 12)
            rows = 30
            columns = 80
            lineWrap = false
        }

        val scrollPane = JBScrollPane(textArea).apply {
            preferredSize = Dimension(800, 600)
        }

        return scrollPane
    }

    override fun createActions() = arrayOf(okAction)

    override fun getOKAction() = super.getOKAction().apply {
        putValue(Action.NAME, "Close")
    }
}